#include <stdio.h>
#include <stdlib.h>
#include <time.h>


// To Randomly Generate the Matrix
void generateMatrix(int size, int *matrix) {
    srand(time(NULL));
    for (int row = 0; row < size; row++) {
        for (int column = 0; column < size; column++) {
           *(matrix + row*size + column) = rand() % 256;
        }
    }
}


// To display all the Matrix
void displayTheMatrix(int size, int *matrix) {
    for (int row = 0; row < size; row++) {
        for (int column = 0; column < size; column++) {
            printf("%4d", *(matrix + row*size + column));
        }
        printf("\n");
    }
}


// To rotate the Matrix 90 Degrees
void rotateMatrix90Clockwise(int size, int *matrix) {
    for (int row = 0; row < size; row++) {
        for (int column = row + 1; column < size; column++) {
            // transpose
            int* firstValue = matrix + row*size + column;
            int* secondValue = matrix + column*size + row;
            int temp = *firstValue;
            *firstValue = *secondValue;
            *secondValue = temp;
        }

        // reverse this row in-place
        int* left = matrix + row*size;
        int* right = matrix + row*size + (size - 1);
        while (left < right) {
            int temp = *left;
            *left = *right;
            *right = temp;
            left++;
            right--;
        }
    }
}


// To apply a 3X3 smoothening filter with the help of sliding window
void applySmootheningFilter(int size, int *matrix) {
    int *tempRow = (int *)malloc(size * sizeof(int)); // O(N) space

    for (int row = 0; row < size; row++) {
        for (int column = 0; column < size; column++) {
            int sum = 0, count = 0;

            for (int windowRow = -1; windowRow <= 1; windowRow++) {
                for (int windowCol = -1; windowCol <= 1; windowCol++) {
                    int neighborRow = row + windowRow;
                    int neighborCol = column + windowCol;

                    // skip invalid boundaries
                    if (neighborRow >= 0 && neighborRow < size &&
                        neighborCol >= 0 && neighborCol < size) {
                        sum += *(matrix + neighborRow*size + neighborCol);
                        count++;
                    }
                }
            }
            *(tempRow + column) = sum / count;  // store temporary smoothed result
        }

        // Copying the smoothed values for this row back into the matrix
        for (int column = 0; column < size; column++) {
            *(matrix + row*size + column) = *(tempRow + column);
        }
    }

    free(tempRow);
}


int main() {
    int sizeOfMatrix = 0;
    printf("Enter matrix size (2-10): ");
    scanf("%d", &sizeOfMatrix);

    if (sizeOfMatrix < 2 || sizeOfMatrix > 10) {
        printf("Invalid size of matrix! (2 ≤ Size Of Matrix ≤ 10)\n");
        return 1;
    }

    // Dynamic allocation
    int *matrix = malloc(sizeOfMatrix * sizeOfMatrix * sizeof(int));

    // To call the function which randomly generates the Matrix
    printf("\nOriginal Randomly Generated Matrix:\n");
    generateMatrix(sizeOfMatrix, matrix);

    // To display the randomly generated matrix
    displayTheMatrix(sizeOfMatrix, matrix);

    // To call the function which rotates the matrix 90 degree
    rotateMatrix90Clockwise(sizeOfMatrix, matrix);
    printf("\nMatrix after 90° Clockwise Rotation:\n");

    // To display the new Matrix
    displayTheMatrix(sizeOfMatrix, matrix);

    // To call the function which applies 3X3 Smoothening Filter
    applySmootheningFilter(sizeOfMatrix, matrix);
    printf("\nMatrix after Applying 3×3 Smoothing Filter:\n");

    // To display the new matrix
    displayTheMatrix(sizeOfMatrix, matrix);

    free(matrix); // free dynamically allocated memory

    return 0;
}
